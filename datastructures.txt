Ways of organizing information with optimal runtime complexity for adding or removing records.

Enqueing:  Adding a record to a queues  :    unshift()
Dequeuing: Removing a record from a queue. :   pop()

Queue follows FIFO - First In First Out

We will initialize an empty array and only allow unshift() and pop()


Stacks:

Stack follows LIFO - Last In First Out

Enqueing:  Adding a record to a queues  :    push()
Dequeuing: Removing a record from a queue. :   unshift()
peek : Top element without removing from the stack


Linked list:

A list of linked nodes. Contains head and a tail.
Node in a lisked list just has a data and reference to the next node in the chain.


Trees:

Tree is completely made of nodes. Each node has a data and also reference to its children.
We have parent-child relationship as well as sibling relationships in a tree.

Iterating through a tree = tree traversal
There are different orders of traversal.

Breadth first traversal:
Left to right

Depth first traversal:
Get to the bottom of the tree as quickly as possible.
hit the bottom of the tree and then back up to the next child and so on.
